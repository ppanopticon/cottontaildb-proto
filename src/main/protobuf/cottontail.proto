syntax = "proto3";

package org.vitrivr.cottontail.grpc;

import "google/protobuf/empty.proto";

option java_package = "org.vitrivr.cottontail.grpc";
option java_outer_classname = "CottontailGrpc";

service DDL {
    /* Handling DB schemas. */
    rpc ListSchemas (google.protobuf.Empty) returns (stream SchemaName);
    rpc CreateSchema (SchemaName) returns (google.protobuf.Empty);
    rpc DropSchema (SchemaName) returns (google.protobuf.Empty);

    /* Handling entities. */
    rpc ListEntities (SchemaName) returns (stream EntityName);
    rpc CreateEntity (EntityDefinition) returns (google.protobuf.Empty);
    rpc EntityDetails (EntityName) returns (EntityDefinition);
    rpc DropEntity (EntityName) returns (google.protobuf.Empty);

    /* Handling indexes. */
    rpc ListIndexes (EntityName) returns (stream IndexDetails);
    rpc CreateIndex (IndexDefinition) returns (google.protobuf.Empty);
    rpc DropIndex (IndexName) returns (google.protobuf.Empty);
    rpc RebuildIndex (IndexName) returns (google.protobuf.Empty);

    /* Optimizing and truncating entities. */
    rpc Optimize (EntityName) returns (google.protobuf.Empty);
    rpc Truncate (EntityName) returns (google.protobuf.Empty);
}

/**
 * Endpoint for data management (INSERT, UPDATE and DELETE).
 */
service DML {
    rpc Insert (stream InsertMessage) returns (QueryResponseMessage);
    rpc Update (stream UpdateMessage) returns (QueryResponseMessage);
    rpc Delete (stream DeleteMessage) returns (QueryResponseMessage);
}

/**
 * Endpoint for data management (SELECT).
 */
service DQL {
    rpc Explain (QueryMessage) returns (stream QueryResponseMessage);
    rpc Query (QueryMessage) returns (stream QueryResponseMessage);
    rpc BatchedQuery (BatchedQueryMessage) returns (stream QueryResponseMessage);
}

/**
 * Endpoint for system commands.
 */
service SYS {
    rpc ListTransactions (google.protobuf.Empty) returns (stream Transaction);
    rpc AbortTransaction (TransactionId) returns (google.protobuf.Empty);
    rpc AbortTransactions (google.protobuf.Empty) returns (google.protobuf.Empty);
    rpc Ping (google.protobuf.Empty) returns (google.protobuf.Empty);
}

/** Identifier for a single schema.  */
message SchemaName {
    string name = 1;
}

/** Identifier for a single entity. */
message EntityName {
    SchemaName schema = 1;
    string name = 2;
}

/** Identifier for a single index. */
message IndexName {
    EntityName entity = 1;
    string name = 2;
}

/** Identifier for a single column. */
message ColumnName {
    EntityName entity = 1;
    string name = 2;
}

/** Identifier for a single index. */
message IndexDetails {
    IndexName name = 1;
    IndexType type = 2;
    repeated ColumnDefinition columns = 3;
}

/** Type of index. */
enum IndexType {
    HASH = 0;
    HASH_UQ = 1;
    BTREE = 2;
    LUCENE = 3;
    VAF = 4;
    PQ = 5;
    LSH = 6;
    SUPERBIT_LSH = 7;
    NONBUCKETING_SUPERBIT_LSH = 8;
}

/** A transaction ID in Cottontail DB. */
message TransactionId {
    int64 value = 1;
}

/** Describes a basic transaction in Cottontail DB. */
message Transaction {
    TransactionId tid = 1;
    Status status = 2;
    int64 created = 3;
    int64 completed = 4;
    enum Status {
        CREATED = 0;
        RUNNING = 1;
        COMPLETED = 2;
        ERROR = 3;
    }
}

/** A basic tuple as used in INSERT or UPDATE statements OR results. */
message Tuple {
    map<string, Literal> data = 1;
}

/* The basic data types supported by Cottontail DB columns. */
enum Type {
    BOOLEAN = 0;
    BYTE = 1;
    SHORT = 2;
    INTEGER = 3;
    LONG = 4;
    FLOAT = 5;
    DOUBLE = 6;
    STRING = 7;
    DOUBLE_VEC = 8;
    FLOAT_VEC = 9;
    LONG_VEC = 10;
    INT_VEC = 11;
    BOOL_VEC = 12;
    COMPLEX32 = 13;
    COMPLEX64 = 14;
    COMPLEX32_VEC = 15;
    COMPLEX64_VEC = 16;
    BLOB = 17;
}

/* The storage engine employed by a Cottontail DB column. */
enum Engine {
    HARE = 0;
    MAPDB = 1;
}

/** Literal data, i.e. field that actually contains information. */
message Literal {
    oneof data {
        bool booleanData = 1;
        int32 intData = 2;
        int64 longData = 3;
        float floatData = 4;
        double doubleData = 5;
        string stringData = 6;
        Complex32 complex32Data = 7;
        Complex64 complex64Data = 8;
        Vector vectorData = 9;
        Null nullData = 10;
    }
}

/** Vector data (as opposed to scalar data). */
message Vector {
    oneof vectorData {
        FloatVector floatVector = 1;
        DoubleVector doubleVector = 2;
        IntVector intVector = 3;
        LongVector longVector = 4;
        BoolVector boolVector = 5;
        Complex32Vector complex32Vector = 6;
        Complex64Vector complex64Vector = 7;
    }
}

/** A null entry.*/
message Null {}

/** A complex number entry using floats.*/
message Complex32 {
    float real = 1;
    float imaginary = 2;
}

/** A complex number entry using doubles.*/
message Complex64 {
    double real = 1;
    double imaginary = 2;
}

/** A float vector. */
message FloatVector {
    repeated float vector = 1;
}

/** A double vector. */
message DoubleVector {
    repeated double vector = 1;
}

/** A int vector. */
message IntVector {
    repeated int32 vector = 1;
}

/** A long vector. */
message LongVector {
    repeated int64 vector = 1;
}

/** A boolean vector. */
message BoolVector {
    repeated bool vector = 1;
}

/** A complex vector using 32bit floating point numbers. */
message Complex32Vector {
    repeated Complex32 vector = 1;
}

/** A complex vector using 64bit floating point numbers. */
message Complex64Vector {
    repeated Complex64 vector = 1;
}

/*
 * Data Definition Language (DDL) messages
 */

/** Definition of a column in Cottontail DB. */
message ColumnDefinition {
    string name = 1;
    Type type = 2;
    uint32 length = 3;
    bool unique = 4;
    bool nullable = 5;
    Engine engine = 6;
}

/** Definition of an entity in Cottontail DB. */
message EntityDefinition {
    EntityName entity = 1;
    repeated ColumnDefinition columns = 2;
}

/** Message for creating an index. */
message IndexDefinition {
    IndexDetails index = 1;
    repeated string columns = 2;
    map<string,string> params = 3;
}

/** Message for inserting data into an entity. */
message InsertMessage {
    string queryId = 1;
    From from = 2;
    Tuple tuple = 3;
}

/** Message for updating data in an entity. */
message UpdateMessage {
    string queryId = 1;
    From from = 2;
    Where where = 3;
    Tuple tuple = 4;
}

/** Message for deleting data from an entity. */
message DeleteMessage {
    string queryId = 1;
    From from = 2;
    Where where = 3;
}

/*
 * Data Query Language (DQL)
 */

/* A simple query. */
message Query {
    From from = 1;
    Projection projection = 2;
    Where where = 3;
    Knn knn = 4;
    uint64 limit = 5; /* Size of the result-set (default: unlimited). */
    uint64 skip = 6; /* Number of records to skip. */
}

/* A batch of queries that should be executed. The individual queries will return under a single query ID. */
message BatchedQueryMessage {
    string queryId = 1;
    repeated Query queries = 2;
}

/* A single query that should be executed. */
message QueryMessage {
    string queryId = 1;
    Query query = 2;
}

/* A query response message. */
message QueryResponseMessage {
    string queryId = 1;
    repeated Tuple results = 2;
}

/* The from part for a query. */
message From {
    oneof from {
        EntityName entity = 1; /* Entity data. */
        Sample sample = 2; /* Random sample of an Entity. */
        Query query = 3; /* Sub-select. */
    }
}

/* Describes a random sample of an Entity. Can be used to specify the "FROM" part of a query. */
message Sample {
    EntityName entity = 1;
    int64 size = 2;
    int64 seed = 3;
}

/* The projection part of a query (select + attributes / count / exists) . */
message Projection {
    Operation op = 1;
    map<string, string> attributes = 2;
    enum Operation {
        SELECT = 0;
        SELECT_DISTINCT = 1;
        COUNT = 2;
        COUNT_DISTINCT = 3;
        EXISTS = 4;
        SUM = 5;
        MAX = 6;
        MIN = 7;
        MEAN = 8;
    }
}

/**
 * The kNN part of a QueryMessage.
 */
message Knn {
    ColumnName attribute = 1;
    uint32 k = 2;
    Distance distance = 3;
    KnnHint hint = 4;
    repeated Vector query = 5;
    repeated Vector weights = 6;
    enum Distance {
        L1 = 0;
        L2 = 1;
        L2SQUARED = 2;
        CHISQUARED = 3;
        HAMMING = 4;
        COSINE = 5;
        ABSOLUTEINNERPRODUCT = 6;
        REALINNERPRODUCT = 7;
        HAVERSINE = 10;
    }
}

/**
  * A hint to the query planner for kNN queries.
  */
message KnnHint {
    oneof hint {
        NoIndexKnnHint noIndexHint = 1;
        AllowInexactKnnHint allowInexactIndexHint = 2;
        IndexTypeKnnHint typeIndexHint = 3;
        IndexNameKnnHint nameIndexHint = 4;
        ParallelKnnHint parallelIndexHint = 5;
    }

    message NoIndexKnnHint {}
    message AllowInexactKnnHint {
        bool allow = 1;
    }
    message IndexTypeKnnHint {
        IndexType type = 2;
    }
    message IndexNameKnnHint {
        string name = 1;
        map<string,string> parameters = 2;
    }
    message ParallelKnnHint {
        uint32 min = 1;
        uint32 max = 2;
    }
}

/**
 * The 'WHERE' part of a QueryMessage.
 */
message Where {
    oneof predicate {
        AtomicLiteralBooleanPredicate atomic = 1;
        CompoundBooleanPredicate compound = 2;
    }
}

/**
 * An operator to compare a series of values.
 */
enum ComparisonOperator {
    EQUAL = 0;
    GREATER = 1;
    LESS = 2;
    GEQUAL = 3;
    LEQUAL = 4;
    IN = 5;
    BETWEEN = 6;
    ISNULL = 7;
    ISNOTNULL = 8;
    LIKE = 9;
}

/**
 * An operator to connect multiple boolean predicates.
 */
enum ConnectionOperator {
    AND = 0;
    OR = 1;
}

/**
 * An atomic boolean predicate of form X OP Y, where Y is a literal (or list of literals).
 */
message AtomicLiteralBooleanPredicate {
    ColumnName left = 1;
    bool not = 2;
    ComparisonOperator op = 3;
    repeated Literal right = 4;

}

/**
  * The boolean query part for a query message.
  */
message CompoundBooleanPredicate {
    oneof left {
        AtomicLiteralBooleanPredicate aleft = 1;
        CompoundBooleanPredicate cleft = 2;
    }
    ConnectionOperator op = 3;
    oneof right {
        AtomicLiteralBooleanPredicate aright = 4;
        CompoundBooleanPredicate cright = 5;
    }
}